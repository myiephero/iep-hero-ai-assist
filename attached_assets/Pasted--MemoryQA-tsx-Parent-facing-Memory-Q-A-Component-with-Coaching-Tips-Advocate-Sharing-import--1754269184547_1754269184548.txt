// ✅ MemoryQA.tsx – Parent-facing Memory Q&A Component with Coaching Tips + Advocate Sharing
import { useState } from "react";

const FOLLOW_UP_TEMPLATES = [
  "What accommodations does my child have?",
  "What services are included in this IEP?",
  "Summarize the academic goals in this plan."
];

export default function MemoryQA({ userId }: { userId: string }) {
  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);
  const [shareWithAdvocate, setShareWithAdvocate] = useState(false);

  async function askMemory(q?: string) {
    const prompt = q || question;
    setLoading(true);
    setAnswer("Thinking...");

    const res = await fetch("/api/memory-query", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ userId, prompt })
    });

    const data = await res.json();
    setAnswer(data.answer || "No answer returned.");
    setLoading(false);
  }

  return (
    <div className="space-y-4 p-4 border rounded-xl bg-white shadow">
      <h2 className="text-lg font-bold">Ask About Your IEP</h2>

      <div className="flex items-center gap-2">
        <input
          type="text"
          placeholder="e.g., What services are provided?"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          className="w-full border px-3 py-2 rounded"
        />
        <button
          onClick={() => askMemory()}
          disabled={loading}
          className="bg-blue-600 text-white px-4 py-2 rounded"
        >
          {loading ? "Thinking..." : "Ask"}
        </button>
      </div>

      <div className="flex items-center gap-2">
        <label className="text-sm">
          <input
            type="checkbox"
            checked={shareWithAdvocate}
            onChange={() => setShareWithAdvocate(!shareWithAdvocate)}
            className="mr-2"
          />
          Share this answer with my advocate
        </label>
      </div>

      {answer && (
        <div className="bg-gray-100 p-3 rounded text-sm whitespace-pre-wrap">
          {answer}
        </div>
      )}

      <div className="pt-4">
        <h4 className="text-sm font-semibold mb-2">Try one of these:</h4>
        <div className="flex flex-wrap gap-2">
          {FOLLOW_UP_TEMPLATES.map((q, i) => (
            <button
              key={i}
              onClick={() => askMemory(q)}
              className="text-sm px-3 py-1 rounded bg-gray-200 hover:bg-gray-300"
            >
              {q}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}

// ✅ memory-query.ts – Backend route that uses AIService.queryIEPMemory
import { AIService } from "@/utils/ai-service";

export async function POST(req: Request) {
  const { userId, prompt } = await req.json();

  try {
    const answer = await AIService.queryIEPMemory(userId, prompt);
    return Response.json({ answer });
  } catch (error) {
    return Response.json({ error: "Failed to query memory" }, { status: 500 });
  }
}
