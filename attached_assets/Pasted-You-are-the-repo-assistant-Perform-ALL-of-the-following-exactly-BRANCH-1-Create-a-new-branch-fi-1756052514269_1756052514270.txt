You are the repo assistant. Perform ALL of the following exactly.

BRANCH
1) Create a new branch: fix/auth-cors-sw

FRONTEND — add a single helper that always sends the Supabase bearer
2) Create file client/src/lib/apiRequest.ts with EXACT contents:

------------------------------------------------
import { supabase } from "../lib/supabase"; // adjust path if your supabase client lives elsewhere

type ReqInit = Omit<RequestInit, "headers"> & { headers?: Record<string, string> };

export async function apiRequest(input: string, init: ReqInit = {}) {
  const { data } = await supabase.auth.getSession();
  const token = data?.session?.access_token;

  const headers: Record<string, string> = {
    "Accept": "application/json",
    ...(init.body instanceof FormData ? {} : { "Content-Type": "application/json" }),
    ...(init.headers || {}),
  };

  if (token) headers["Authorization"] = `Bearer ${token}`;

  return fetch(input, { ...init, headers });
}
------------------------------------------------

3) Replace any direct fetch() calls hitting our own API with apiRequest(). 
   Update these known locations (create the file if path differs; keep logic intact):
   - client/src/pages/ParentDashboard/IEPAnalyzer.tsx
     • Find: fetch("/api/review-iep", { method: "POST", ... })
     • Replace with: apiRequest("/api/review-iep", { method: "POST", body: formData })
     • Add at top: import { apiRequest } from "../../lib/apiRequest";
   - client/src/pages/OTRecommender.tsx (or component that calls /api/generate-ot-recommendations)
     • Find: fetch("/api/generate-ot-recommendations", { method: "POST", ... })
     • Replace with: apiRequest("/api/generate-ot-recommendations", { method: "POST", body: JSON.stringify(payload) })
     • Add at top: import { apiRequest } from "../../lib/apiRequest";

   Also grep the codebase for: fetch("/api/ and replace similarly.

BACKEND — verify the bearer, require auth on AI endpoints, fix CORS
4) Add server/src/lib/supabaseAdmin.ts with EXACT contents:

------------------------------------------------
import { createClient } from "@supabase/supabase-js";

const url = process.env.SUPABASE_URL!;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

export const supabaseAdmin = createClient(url, serviceKey, {
  auth: { persistSession: false },
});
------------------------------------------------

5) Add middleware at server/src/middleware/auth.ts:

------------------------------------------------
import type { Request, Response, NextFunction } from "express";
import { supabaseAdmin } from "../lib/supabaseAdmin";

export async function requireAuth(req: Request, res: Response, next: NextFunction) {
  try {
    const auth = req.headers.authorization || "";
    const token = auth.startsWith("Bearer ") ? auth.slice(7) : undefined;
    if (!token) return res.status(401).json({ error: "Missing Authorization header" });

    const { data, error } = await supabaseAdmin.auth.getUser(token);
    if (error || !data?.user) return res.status(401).json({ error: "Invalid or expired token" });

    (req as any).user = data.user; // attach for handlers
    next();
  } catch (e) {
    res.status(401).json({ error: "Unauthorized" });
  }
}
------------------------------------------------

6) Ensure Express enables CORS and allows Authorization. 
   Edit server/src/index.ts (or server entry) so the app has:

------------------------------------------------
// near top
import cors from "cors";

// after app creation
app.use(cors({
  origin: true, // or specific origin(s) if you prefer
  credentials: true,
  allowedHeaders: ["Authorization", "Content-Type"],
  methods: ["GET","POST","PUT","DELETE","OPTIONS"],
}));
------------------------------------------------

7) Protect the AI routes with the middleware. 
   Edit the files that register endpoints (adjust paths if different):

   - server/src/routes/reviewIep.ts (or wherever "/api/review-iep" is handled)
     • Import: import { requireAuth } from "../middleware/auth";
     • Apply: router.post("/api/review-iep", requireAuth, async (req, res) => { 
         const user = (req as any).user;
         // existing logic; use user.id if needed
       });

   - server/src/routes/otRecs.ts (or wherever "/api/generate-ot-recommendations" is handled)
     • Import and apply requireAuth the same way on POST "/api/generate-ot-recommendations".

SERVICE WORKER — stop failing on POST cache puts
8) Edit public/sw.js (or client/public/sw.js — whichever is actually served):
   • Wrap any cache logic so it only runs for GET requests. Example:

------------------------------------------------
self.addEventListener("fetch", (event) => {
  if (event.request.method !== "GET") return; // do not try to cache POST/PUT/etc.
  // existing fetch/caching strategy below this line
});
------------------------------------------------

HOUSEKEEPING
9) TypeScript/Build check:
   - If TS: run typecheck/build scripts (e.g., npm run typecheck || tsc -p . ; npm run build)
   - Fix any import paths that differ (report what you changed).

COMMIT & PUSH
10) Commit all changes on branch fix/auth-cors-sw with message:
    chore: auth bearer + server verify + CORS + SW GET-only

11) Push branch and open a PR to main. Output the PR URL.

POST‑RUN VALIDATION (log results)
12) Print a short report:
    - Files changed list
    - All locations where fetch(...) → apiRequest(...)
    - Confirm CORS is active (show the code snippet you applied)
    - Confirm middleware wraps both /api/review-iep and /api/generate-ot-recommendations
    - Show sw.js line that guards non‑GET requests