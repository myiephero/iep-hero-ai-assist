import { useState } from 'react';
import { supabase } from '../utils/supabaseClient';

export default function AdvocateMatcherForm() {
  const [meetingDate, setMeetingDate] = useState('');
  const [contactMethod, setContactMethod] = useState('Zoom');
  const [availability, setAvailability] = useState('');
  const [concerns, setConcerns] = useState('');
  const [helpAreas, setHelpAreas] = useState([]);
  const [gradeLevel, setGradeLevel] = useState('');
  const [schoolDistrict, setSchoolDistrict] = useState('');
  const [uploadedFiles, setUploadedFiles] = useState([]);

  const handleCheckboxChange = (e) => {
    const value = e.target.value;
    setHelpAreas(prev =>
      prev.includes(value) ? prev.filter(v => v !== value) : [...prev, value]
    );
  };

  const handleFileUpload = async (e) => {
    const files = e.target.files;
    const urls = [];
    for (let file of files) {
      const { data, error } = await supabase.storage
        .from('uploads')
        .upload(`docs/${file.name}`, file);
      if (data) {
        const url = supabase.storage.from('uploads').getPublicUrl(data.path).publicUrl;
        urls.push(url);
      }
    }
    setUploadedFiles(urls);
  };

  const handleSubmit = async () => {
    const user = await supabase.auth.getUser();
    const userId = user?.data?.user?.id;

    const formData = {
      meetingDate,
      contactMethod,
      availability,
      concerns,
      helpAreas,
      gradeLevel,
      schoolDistrict,
      uploadedFiles
    };

    const { error } = await supabase.from("advocate_matches").insert([
      {
        parent_id: userId,
        meeting_date: meetingDate,
        contact_method: contactMethod,
        parent_availability: availability,
        concerns,
        help_areas: helpAreas,
        grade_level: gradeLevel,
        school_district: schoolDistrict,
        status: "pending",
        document_urls: uploadedFiles
      }
    ]);

    if (error) {
      alert("Error submitting match: " + error.message);
    } else {
      alert("Advocate match request submitted successfully!");
    }
  };

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-bold">Find an Advocate</h2>

      <input type="date" onChange={e => setMeetingDate(e.target.value)} placeholder="Meeting Date" />
      <input type="text" onChange={e => setAvailability(e.target.value)} placeholder="Availability" />
      <textarea onChange={e => setConcerns(e.target.value)} placeholder="Your biggest concern" />
      <input type="text" onChange={e => setGradeLevel(e.target.value)} placeholder="Child's Grade Level" />
      <input type="text" onChange={e => setSchoolDistrict(e.target.value)} placeholder="School District" />

      <div>
        <label>
          <input type="radio" name="contact" value="Phone" onChange={e => setContactMethod(e.target.value)} /> Phone
        </label>
        <label>
          <input type="radio" name="contact" value="Zoom" defaultChecked onChange={e => setContactMethod(e.target.value)} /> Zoom
        </label>
      </div>

      <div>
        <label>Help Areas:</label>
        {['IEP Evaluation', 'Service Denial', 'Meeting Prep'].map(area => (
          <label key={area} className="block">
            <input type="checkbox" value={area} onChange={handleCheckboxChange} /> {area}
          </label>
        ))}
      </div>

      <input type="file" multiple onChange={handleFileUpload} />

      <button onClick={handleSubmit} className="bg-blue-600 text-white px-4 py-2 rounded">
        Submit Request
      </button>
    </div>
  );
}