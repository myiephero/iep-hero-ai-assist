import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { 
  Brain, 
  FileText, 
  Target, 
  CheckCircle2, 
  AlertTriangle, 
  TrendingUp,
  Download,
  Sparkles,
  Crown
} from "lucide-react";

interface AnalysisResult {
  overallScore: number;
  strengthsCount: number;
  improvementsCount: number;
  recommendations: string[];
  strengths: string[];
  improvements: string[];
  nextSteps: string[];
}

export default function IEPAnalyzer() {
  const [analysisText, setAnalysisText] = useState("");
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null);
  const { toast } = useToast();

  const analyzeIEP = async () => {
    if (!analysisText.trim()) {
      toast({
        title: "Input Required",
        description: "Please paste your IEP document text for analysis.",
        variant: "destructive",
      });
      return;
    }

    setIsAnalyzing(true);
    try {
      const response = await apiRequest("POST", "/api/analyze-iep", {
        content: analysisText
      });
      
      if (!response.ok) {
        throw new Error("Analysis failed");
      }

      const result = await response.json();
      setAnalysis(result);
      
      toast({
        title: "Analysis Complete!",
        description: "Your IEP has been thoroughly analyzed by AI.",
      });
    } catch (error) {
      console.error("Analysis error:", error);
      toast({
        title: "Analysis Failed",
        description: "Unable to analyze IEP. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const generateReport = () => {
    if (!analysis) return;
    
    const reportContent = `
AI IEP Analysis Report
======================

Overall Assessment: ${analysis.overallScore}% - ${analysis.overallScore >= 80 ? 'Strong IEP' : analysis.overallScore >= 60 ? 'Good IEP' : 'Needs Improvement'}

STRENGTHS IDENTIFIED:
${analysis.strengths.map((strength, i) => `✓ ${strength}`).join('\n')}

AREAS FOR IMPROVEMENT:
${analysis.improvements.map((improvement, i) => `△ ${improvement}`).join('\n')}

RECOMMENDED NEXT STEPS:
${analysis.nextSteps.map((step, i) => `${i + 1}. ${step}`).join('\n')}

PRIORITY ACTIONS:
${analysis.recommendations.map((rec, i) => `★ ${rec}`).join('\n')}

---
Generated by My IEP Hero AI Analysis Tool
Report Date: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `IEP_Analysis_Report_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">


      {/* Input Section */}
      <Card className="bg-white/10 backdrop-blur-lg border-white/20">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <FileText className="w-5 h-5" />
            IEP Document Input
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Textarea
            placeholder="Paste your IEP document text here for analysis. Include goals, accommodations, services, and any other relevant sections..."
            value={analysisText}
            onChange={(e) => setAnalysisText(e.target.value)}
            rows={8}
            className="resize-none bg-white/5 border-white/20 text-white placeholder:text-white/60"
          />
          <Button 
            onClick={analyzeIEP}
            disabled={isAnalyzing || !analysisText.trim()}
            className="bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700"
          >
            {isAnalyzing ? (
              <>
                <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                Analyzing...
              </>
            ) : (
              <>
                <Sparkles className="w-4 h-4 mr-2" />
                Analyze IEP
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Analysis Results */}
      {analysis && (
        <div className="space-y-6">
          {/* Overall Score */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="w-5 h-5" />
                Overall Assessment
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-lg font-medium">IEP Quality Score</span>
                  <span className="text-2xl font-bold text-blue-600">{analysis.overallScore}%</span>
                </div>
                <Progress 
                  value={analysis.overallScore} 
                  className="h-3"
                />
                <div className="grid grid-cols-2 gap-4 mt-4">
                  <div className="text-center p-3 bg-green-50 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">{analysis.strengthsCount}</div>
                    <div className="text-sm text-green-700">Strengths Identified</div>
                  </div>
                  <div className="text-center p-3 bg-orange-50 rounded-lg">
                    <div className="text-2xl font-bold text-orange-600">{analysis.improvementsCount}</div>
                    <div className="text-sm text-orange-700">Areas for Improvement</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Strengths */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-green-700">
                <CheckCircle2 className="w-5 h-5" />
                Strengths Identified
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {analysis.strengths.map((strength, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                    <span className="text-sm">{strength}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          {/* Areas for Improvement */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-orange-700">
                <AlertTriangle className="w-5 h-5" />
                Areas for Improvement
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {analysis.improvements.map((improvement, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <AlertTriangle className="w-4 h-4 text-orange-500 mt-0.5 flex-shrink-0" />
                    <span className="text-sm">{improvement}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          {/* Recommendations */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-blue-700">
                <Target className="w-5 h-5" />
                Priority Recommendations
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {analysis.recommendations.map((recommendation, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <Target className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
                    <span className="text-sm">{recommendation}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          {/* Next Steps */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-purple-700">
                <Sparkles className="w-5 h-5" />
                Recommended Next Steps
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ol className="space-y-2">
                {analysis.nextSteps.map((step, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <span className="flex-shrink-0 w-6 h-6 bg-purple-100 text-purple-600 rounded-full flex items-center justify-center text-xs font-bold">
                      {index + 1}
                    </span>
                    <span className="text-sm">{step}</span>
                  </li>
                ))}
              </ol>
            </CardContent>
          </Card>

          {/* Download Report */}
          <Card>
            <CardContent className="pt-6">
              <Button 
                onClick={generateReport}
                variant="outline"
                className="w-full"
              >
                <Download className="w-4 h-4 mr-2" />
                Download Full Analysis Report
              </Button>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}